############################################################################################################################
#### File contains calculations that verify complements for maximal tori of finite twisted group ^2G_2(q) in their algebraic normalizers.
#### Each case is divided into two parts. The first part contains commands for GAP. We verify generators and relations
#### for C_(sigma,W(w). Here C_(sigma,w)={x in W | x^-1*w*x^sigma = w}.
#### The second part devotes to computations in MAGMA. We verify that specific preimages of generators of C_(sigma,W)(w) satisfy
#### the set of defining relations of C_(sigma,W)(w).
#####

#### Preparatory commands in GAP:
#### reflections and the Weyl group 
####

w1:=[[-1, 3], [ 0, 1]];;
w2:=[[1, 0], [ 1, -1]];;
w3:=[[2, -3], [ 1, -2]];;
w4:=[[-1, 0], [ -1, 1]];;
w5:=[[-2, 3], [ -1, 2]];;
w6:=[[1, -3], [ 0, -1]];;

w:=[w1,w2,w3,w4,w5,w6];
W:=Group(w1,w2);
w0:=w1*w6;
id:=w[1]^2; ## identity matrix

#### list of all 12 elements of W
elements := [w1, w2, w3, w4, w5, w6, id, (w1*w2), (w1*w2)^2, (w1*w2)^3, (w1*w2)^4, (w1*w2)^5];
#### corresponding elements after applying automorphism sigma
#### sigma comes from the symmetry of the diagram G2 which switches roots r1 and r2
sigma := [w2, w1, w5, w6, w3, w4, id, (w2*w1), (w2*w1)^2, (w2*w1)^3, (w2*w1)^4, (w2*w1)^5];

###############################################################################

##### Preparatory commands in MAGMA (calculator: http://magma.maths.usyd.edu.au/calc/ ) to perform calculations

L:=LieAlgebra("G2", Rationals());
R:=RootDatum(L);
G:=GroupOfLieType(L);
X, Y, H:= ChevalleyBasis(L);  // print out extra special pairs of roots and signs
IsChevalleyBasis(L, R, X, Y, H);
n:=[ elt<G|i> : i in [1..6]];
h:=[TorusTerm(G, i,-1) : i in [1..6]];
w:=[Transpose(i) : i in ReflectionMatrices(R)];

n0:=h[1]*n[1]*n[6];

// verify that n0 commutes with all n[i]

n0*n[1] eq n[1]*n0;
n0*n[2] eq n[2]*n0;
n0*n[3] eq n[3]*n0;
n0*n[4] eq n[4]*n0;
n0*n[5] eq n[5]*n0;
n0*n[6] eq n[6]*n0;

###############################################################################
#### Torus 1 (w=1)
#### verify that C_(sigma,W)(w) is isomorphic to Z2

x:=id;
C:=[];
for i in [1..Size(elements)] do
  if elements[i]^-1*x*sigma[i] = x then
    Add(C, elements[i]);
  fi;
od;

Size(C) = Size(Group(C));
C:=Group(C);
Order(C) = 2;

#### verify that w0 generates C_(sigma,W)(w) and satisfies the set of relations (GAP)

a:=w0;
a in C;
Order(Group(a)) = Size(C);

#### verify that n0 lies in the normalizer and generates a complement (MAGMA)

x:=id;

n0 eq h[2]*n[2]*n[4];  // n0 = n0^sigma
n0^2 eq 1;

#############################################################################
#### Torus 2 (w=w1)
#### verify that C_(sigma,W)(w) is isomorphic to Z6

x:=w[1];
C:=[];
for i in [1..Size(elements)] do
  if elements[i]^-1*x*sigma[i] = x then
    Add(C, elements[i]);
  fi;
od;

Size(C) = Size(Group(C));
C:=Group(C);
IsCyclic(C);
Order(C) = 6;

#### verify that w1*w2 generates C_(sigma,W)(w) and satisfies the set of relations (GAP)

a:=w1*w2;
a in C;
Order(Group(a)) = Size(C);

#### verify that n[1]*n[2] lies in the normalizer and generates a complement 

x:=n[1];
a:=n[1]*n[2];
x*n[2]*n[1]*x^-1 eq a;  // a^(sigma*n) = a
a^6 eq 1;

#############################################################################
#### Torus 3 (w=w3)

#### verify that C_(sigma,W)(w) is isomorphic to Z6

x:=w[3];
C:=[];
for i in [1..Size(elements)] do
  if elements[i]^-1*x*sigma[i] = x then
    Add(C, elements[i]);
  fi;
od;

Size(C) = Size(Group(C));
C:=Group(C);
IsCyclic(C);
Order(C) = 6;

#### verify that w1*w2 generates C_(sigma,W)(w) and satisfies the set of relations (GAP)

a:=w1*w2;
a in C;
Order(Group(a)) = Size(C);

#### verify that n[1]*n[2] lies in the normalzier and generates a complement 

x:=h[2]*n[3];
a:=n[1]*n[2];
x*n[2]*n[1]*x^-1 eq a;
a^6 eq 1;

#############################################################################
#### Torus 4 (w=w4)

#### verify that C_(sigma,W)(w) is isomorphic to Z6

x:=w[4];
C:=[];
for i in [1..Size(elements)] do
  if elements[i]^-1*x*sigma[i] = x then
    Add(C, elements[i]);
  fi;
od;

Size(C) = Size(Group(C));
C:=Group(C);
IsCyclic(C);
Order(C) = 6;

#### verify that w1*w2 generates C_(sigma,W)(w) and satisfies the set of relations (GAP)

a:=w1*w2;
a in C;
Order(Group(a)) = Size(C);

#### verify that n[1]*n[2] lies in the normalizer and generates a complement 

x:=h[2]*n[4];
a:=n[1]*n[2];
x*n[2]*n[1]*x^-1 eq a;
a^6 eq 1;

